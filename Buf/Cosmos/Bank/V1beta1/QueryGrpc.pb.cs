// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmos/bank/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cosmos.Bank.V1beta1 {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "cosmos.bank.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryBalanceRequest> __Marshaller_cosmos_bank_v1beta1_QueryBalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryBalanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryBalanceResponse> __Marshaller_cosmos_bank_v1beta1_QueryBalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryBalanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest> __Marshaller_cosmos_bank_v1beta1_QueryAllBalancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse> __Marshaller_cosmos_bank_v1beta1_QueryAllBalancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest> __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse> __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest> __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalanceByDenomRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse> __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalanceByDenomResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest> __Marshaller_cosmos_bank_v1beta1_QueryTotalSupplyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse> __Marshaller_cosmos_bank_v1beta1_QueryTotalSupplyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest> __Marshaller_cosmos_bank_v1beta1_QuerySupplyOfRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse> __Marshaller_cosmos_bank_v1beta1_QuerySupplyOfResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryParamsRequest> __Marshaller_cosmos_bank_v1beta1_QueryParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryParamsResponse> __Marshaller_cosmos_bank_v1beta1_QueryParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest> __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse> __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest> __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataByQueryStringRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse> __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataByQueryStringResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest> __Marshaller_cosmos_bank_v1beta1_QueryDenomsMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse> __Marshaller_cosmos_bank_v1beta1_QueryDenomsMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest> __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse> __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest> __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersByQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse> __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersByQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest> __Marshaller_cosmos_bank_v1beta1_QuerySendEnabledRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse> __Marshaller_cosmos_bank_v1beta1_QuerySendEnabledResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryBalanceRequest, global::Cosmos.Bank.V1beta1.QueryBalanceResponse> __Method_Balance = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryBalanceRequest, global::Cosmos.Bank.V1beta1.QueryBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Balance",
        __Marshaller_cosmos_bank_v1beta1_QueryBalanceRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryBalanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest, global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse> __Method_AllBalances = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest, global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllBalances",
        __Marshaller_cosmos_bank_v1beta1_QueryAllBalancesRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryAllBalancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest, global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse> __Method_SpendableBalances = new grpc::Method<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest, global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpendableBalances",
        __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalancesRequest,
        __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest, global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse> __Method_SpendableBalanceByDenom = new grpc::Method<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest, global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpendableBalanceByDenom",
        __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalanceByDenomRequest,
        __Marshaller_cosmos_bank_v1beta1_QuerySpendableBalanceByDenomResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest, global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse> __Method_TotalSupply = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest, global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalSupply",
        __Marshaller_cosmos_bank_v1beta1_QueryTotalSupplyRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryTotalSupplyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest, global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse> __Method_SupplyOf = new grpc::Method<global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest, global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SupplyOf",
        __Marshaller_cosmos_bank_v1beta1_QuerySupplyOfRequest,
        __Marshaller_cosmos_bank_v1beta1_QuerySupplyOfResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryParamsRequest, global::Cosmos.Bank.V1beta1.QueryParamsResponse> __Method_Params = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryParamsRequest, global::Cosmos.Bank.V1beta1.QueryParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Params",
        __Marshaller_cosmos_bank_v1beta1_QueryParamsRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest, global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse> __Method_DenomMetadata = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest, global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomMetadata",
        __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest, global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse> __Method_DenomMetadataByQueryString = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest, global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomMetadataByQueryString",
        __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataByQueryStringRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryDenomMetadataByQueryStringResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest, global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse> __Method_DenomsMetadata = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest, global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomsMetadata",
        __Marshaller_cosmos_bank_v1beta1_QueryDenomsMetadataRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryDenomsMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest, global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse> __Method_DenomOwners = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest, global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomOwners",
        __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest, global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse> __Method_DenomOwnersByQuery = new grpc::Method<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest, global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomOwnersByQuery",
        __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersByQueryRequest,
        __Marshaller_cosmos_bank_v1beta1_QueryDenomOwnersByQueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest, global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse> __Method_SendEnabled = new grpc::Method<global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest, global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendEnabled",
        __Marshaller_cosmos_bank_v1beta1_QuerySendEnabledRequest,
        __Marshaller_cosmos_bank_v1beta1_QuerySendEnabledResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cosmos.Bank.V1beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Balance queries the balance of a single coin for a single account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryBalanceResponse Balance(global::Cosmos.Bank.V1beta1.QueryBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Balance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance queries the balance of a single coin for a single account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryBalanceResponse Balance(global::Cosmos.Bank.V1beta1.QueryBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Balance, null, options, request);
      }
      /// <summary>
      /// Balance queries the balance of a single coin for a single account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryBalanceResponse> BalanceAsync(global::Cosmos.Bank.V1beta1.QueryBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance queries the balance of a single coin for a single account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryBalanceResponse> BalanceAsync(global::Cosmos.Bank.V1beta1.QueryBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Balance, null, options, request);
      }
      /// <summary>
      /// AllBalances queries the balance of all coins for a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse AllBalances(global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllBalances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AllBalances queries the balance of all coins for a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse AllBalances(global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllBalances, null, options, request);
      }
      /// <summary>
      /// AllBalances queries the balance of all coins for a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse> AllBalancesAsync(global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllBalancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AllBalances queries the balance of all coins for a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryAllBalancesResponse> AllBalancesAsync(global::Cosmos.Bank.V1beta1.QueryAllBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllBalances, null, options, request);
      }
      /// <summary>
      /// SpendableBalances queries the spendable balance of all coins for a single
      /// account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse SpendableBalances(global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpendableBalances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpendableBalances queries the spendable balance of all coins for a single
      /// account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse SpendableBalances(global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpendableBalances, null, options, request);
      }
      /// <summary>
      /// SpendableBalances queries the spendable balance of all coins for a single
      /// account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse> SpendableBalancesAsync(global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpendableBalancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpendableBalances queries the spendable balance of all coins for a single
      /// account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySpendableBalancesResponse> SpendableBalancesAsync(global::Cosmos.Bank.V1beta1.QuerySpendableBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpendableBalances, null, options, request);
      }
      /// <summary>
      /// SpendableBalanceByDenom queries the spendable balance of a single denom for
      /// a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse SpendableBalanceByDenom(global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpendableBalanceByDenom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpendableBalanceByDenom queries the spendable balance of a single denom for
      /// a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse SpendableBalanceByDenom(global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpendableBalanceByDenom, null, options, request);
      }
      /// <summary>
      /// SpendableBalanceByDenom queries the spendable balance of a single denom for
      /// a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse> SpendableBalanceByDenomAsync(global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpendableBalanceByDenomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpendableBalanceByDenom queries the spendable balance of a single denom for
      /// a single account.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomResponse> SpendableBalanceByDenomAsync(global::Cosmos.Bank.V1beta1.QuerySpendableBalanceByDenomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpendableBalanceByDenom, null, options, request);
      }
      /// <summary>
      /// TotalSupply queries the total supply of all coins.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse TotalSupply(global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalSupply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalSupply queries the total supply of all coins.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse TotalSupply(global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalSupply, null, options, request);
      }
      /// <summary>
      /// TotalSupply queries the total supply of all coins.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse> TotalSupplyAsync(global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalSupplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalSupply queries the total supply of all coins.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryTotalSupplyResponse> TotalSupplyAsync(global::Cosmos.Bank.V1beta1.QueryTotalSupplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalSupply, null, options, request);
      }
      /// <summary>
      /// SupplyOf queries the supply of a single coin.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse SupplyOf(global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SupplyOf(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SupplyOf queries the supply of a single coin.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse SupplyOf(global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SupplyOf, null, options, request);
      }
      /// <summary>
      /// SupplyOf queries the supply of a single coin.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse> SupplyOfAsync(global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SupplyOfAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SupplyOf queries the supply of a single coin.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySupplyOfResponse> SupplyOfAsync(global::Cosmos.Bank.V1beta1.QuerySupplyOfRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SupplyOf, null, options, request);
      }
      /// <summary>
      /// Params queries the parameters of x/bank module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryParamsResponse Params(global::Cosmos.Bank.V1beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Params(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Params queries the parameters of x/bank module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryParamsResponse Params(global::Cosmos.Bank.V1beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Params queries the parameters of x/bank module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryParamsResponse> ParamsAsync(global::Cosmos.Bank.V1beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Params queries the parameters of x/bank module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryParamsResponse> ParamsAsync(global::Cosmos.Bank.V1beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// DenomMetadata queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse DenomMetadata(global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomMetadata queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse DenomMetadata(global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomMetadata, null, options, request);
      }
      /// <summary>
      /// DenomMetadata queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse> DenomMetadataAsync(global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomMetadata queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomMetadataResponse> DenomMetadataAsync(global::Cosmos.Bank.V1beta1.QueryDenomMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomMetadata, null, options, request);
      }
      /// <summary>
      /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse DenomMetadataByQueryString(global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomMetadataByQueryString(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse DenomMetadataByQueryString(global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomMetadataByQueryString, null, options, request);
      }
      /// <summary>
      /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse> DenomMetadataByQueryStringAsync(global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomMetadataByQueryStringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomMetadataByQueryString queries the client metadata of a given coin denomination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringResponse> DenomMetadataByQueryStringAsync(global::Cosmos.Bank.V1beta1.QueryDenomMetadataByQueryStringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomMetadataByQueryString, null, options, request);
      }
      /// <summary>
      /// DenomsMetadata queries the client metadata for all registered coin
      /// denominations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse DenomsMetadata(global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomsMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomsMetadata queries the client metadata for all registered coin
      /// denominations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse DenomsMetadata(global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomsMetadata, null, options, request);
      }
      /// <summary>
      /// DenomsMetadata queries the client metadata for all registered coin
      /// denominations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse> DenomsMetadataAsync(global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomsMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomsMetadata queries the client metadata for all registered coin
      /// denominations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomsMetadataResponse> DenomsMetadataAsync(global::Cosmos.Bank.V1beta1.QueryDenomsMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomsMetadata, null, options, request);
      }
      /// <summary>
      /// DenomOwners queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse DenomOwners(global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomOwners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomOwners queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse DenomOwners(global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomOwners, null, options, request);
      }
      /// <summary>
      /// DenomOwners queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse> DenomOwnersAsync(global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomOwnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomOwners queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// When called from another module, this query might consume a high amount of
      /// gas if the pagination field is incorrectly set.
      ///
      /// Since: cosmos-sdk 0.46
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomOwnersResponse> DenomOwnersAsync(global::Cosmos.Bank.V1beta1.QueryDenomOwnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomOwners, null, options, request);
      }
      /// <summary>
      /// DenomOwnersByQuery queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// Since: cosmos-sdk 0.50.3
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse DenomOwnersByQuery(global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomOwnersByQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomOwnersByQuery queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// Since: cosmos-sdk 0.50.3
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse DenomOwnersByQuery(global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomOwnersByQuery, null, options, request);
      }
      /// <summary>
      /// DenomOwnersByQuery queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// Since: cosmos-sdk 0.50.3
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse> DenomOwnersByQueryAsync(global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomOwnersByQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DenomOwnersByQuery queries for all account addresses that own a particular token
      /// denomination.
      ///
      /// Since: cosmos-sdk 0.50.3
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryResponse> DenomOwnersByQueryAsync(global::Cosmos.Bank.V1beta1.QueryDenomOwnersByQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomOwnersByQuery, null, options, request);
      }
      /// <summary>
      /// SendEnabled queries for SendEnabled entries.
      ///
      /// This query only returns denominations that have specific SendEnabled settings.
      /// Any denomination that does not have a specific setting will use the default
      /// params.default_send_enabled, and will not be returned by this query.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse SendEnabled(global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEnabled(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendEnabled queries for SendEnabled entries.
      ///
      /// This query only returns denominations that have specific SendEnabled settings.
      /// Any denomination that does not have a specific setting will use the default
      /// params.default_send_enabled, and will not be returned by this query.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse SendEnabled(global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendEnabled, null, options, request);
      }
      /// <summary>
      /// SendEnabled queries for SendEnabled entries.
      ///
      /// This query only returns denominations that have specific SendEnabled settings.
      /// Any denomination that does not have a specific setting will use the default
      /// params.default_send_enabled, and will not be returned by this query.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse> SendEnabledAsync(global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEnabledAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendEnabled queries for SendEnabled entries.
      ///
      /// This query only returns denominations that have specific SendEnabled settings.
      /// Any denomination that does not have a specific setting will use the default
      /// params.default_send_enabled, and will not be returned by this query.
      ///
      /// Since: cosmos-sdk 0.47
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Bank.V1beta1.QuerySendEnabledResponse> SendEnabledAsync(global::Cosmos.Bank.V1beta1.QuerySendEnabledRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendEnabled, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

  }
}
#endregion
