// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cosmos/distribution/v1beta1/tx.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Distribution.V1beta1 {
	
	public class MsgClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public MsgClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgSetWithdrawAddress sends a MsgSetWithdrawAddress transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetWithdrawAddress message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetWithdrawAddressResponse>> SendMsgSetWithdrawAddress(MsgSetWithdrawAddress msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetWithdrawAddressResponse>(
				r.Result,
				MsgSetWithdrawAddressResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetWithdrawAddress simulates a MsgSetWithdrawAddress transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetWithdrawAddress message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetWithdrawAddress(MsgSetWithdrawAddress msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetWithdrawAddress simulates, estimates fees and then sends a SetWithdrawAddress transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetWithdrawAddress message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetWithdrawAddressResponse>> SimulateAndSendMsgSetWithdrawAddress(MsgSetWithdrawAddress msg) {
			return SimulateMsgSetWithdrawAddress(msg).ContinueWith(r => {
				return SendMsgSetWithdrawAddress(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgWithdrawDelegatorReward sends a MsgWithdrawDelegatorReward transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawDelegatorReward message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgWithdrawDelegatorRewardResponse>> SendMsgWithdrawDelegatorReward(MsgWithdrawDelegatorReward msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgWithdrawDelegatorRewardResponse>(
				r.Result,
				MsgWithdrawDelegatorRewardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgWithdrawDelegatorReward simulates a MsgWithdrawDelegatorReward transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawDelegatorReward message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgWithdrawDelegatorReward(MsgWithdrawDelegatorReward msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgWithdrawDelegatorReward simulates, estimates fees and then sends a WithdrawDelegatorReward transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawDelegatorReward message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgWithdrawDelegatorRewardResponse>> SimulateAndSendMsgWithdrawDelegatorReward(MsgWithdrawDelegatorReward msg) {
			return SimulateMsgWithdrawDelegatorReward(msg).ContinueWith(r => {
				return SendMsgWithdrawDelegatorReward(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgWithdrawValidatorCommission sends a MsgWithdrawValidatorCommission transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawValidatorCommission message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgWithdrawValidatorCommissionResponse>> SendMsgWithdrawValidatorCommission(MsgWithdrawValidatorCommission msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgWithdrawValidatorCommissionResponse>(
				r.Result,
				MsgWithdrawValidatorCommissionResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgWithdrawValidatorCommission simulates a MsgWithdrawValidatorCommission transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawValidatorCommission message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgWithdrawValidatorCommission(MsgWithdrawValidatorCommission msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgWithdrawValidatorCommission simulates, estimates fees and then sends a WithdrawValidatorCommission transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgWithdrawValidatorCommission message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgWithdrawValidatorCommissionResponse>> SimulateAndSendMsgWithdrawValidatorCommission(MsgWithdrawValidatorCommission msg) {
			return SimulateMsgWithdrawValidatorCommission(msg).ContinueWith(r => {
				return SendMsgWithdrawValidatorCommission(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgFundCommunityPool sends a MsgFundCommunityPool transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgFundCommunityPool message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgFundCommunityPoolResponse>> SendMsgFundCommunityPool(MsgFundCommunityPool msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgFundCommunityPool"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgFundCommunityPoolResponse>(
				r.Result,
				MsgFundCommunityPoolResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgFundCommunityPool simulates a MsgFundCommunityPool transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgFundCommunityPool message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgFundCommunityPool(MsgFundCommunityPool msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgFundCommunityPool"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgFundCommunityPool simulates, estimates fees and then sends a FundCommunityPool transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgFundCommunityPool message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgFundCommunityPoolResponse>> SimulateAndSendMsgFundCommunityPool(MsgFundCommunityPool msg) {
			return SimulateMsgFundCommunityPool(msg).ContinueWith(r => {
				return SendMsgFundCommunityPool(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgUpdateParams sends a MsgUpdateParams transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SendMsgUpdateParams(MsgUpdateParams msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgUpdateParams"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>(
				r.Result,
				MsgUpdateParamsResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgUpdateParams simulates a MsgUpdateParams transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgUpdateParams(MsgUpdateParams msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgUpdateParams"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgUpdateParams simulates, estimates fees and then sends a UpdateParams transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SimulateAndSendMsgUpdateParams(MsgUpdateParams msg) {
			return SimulateMsgUpdateParams(msg).ContinueWith(r => {
				return SendMsgUpdateParams(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCommunityPoolSpend sends a MsgCommunityPoolSpend transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCommunityPoolSpend message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCommunityPoolSpendResponse>> SendMsgCommunityPoolSpend(MsgCommunityPoolSpend msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgCommunityPoolSpend"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCommunityPoolSpendResponse>(
				r.Result,
				MsgCommunityPoolSpendResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCommunityPoolSpend simulates a MsgCommunityPoolSpend transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCommunityPoolSpend message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCommunityPoolSpend(MsgCommunityPoolSpend msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgCommunityPoolSpend"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCommunityPoolSpend simulates, estimates fees and then sends a CommunityPoolSpend transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCommunityPoolSpend message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCommunityPoolSpendResponse>> SimulateAndSendMsgCommunityPoolSpend(MsgCommunityPoolSpend msg) {
			return SimulateMsgCommunityPoolSpend(msg).ContinueWith(r => {
				return SendMsgCommunityPoolSpend(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgDepositValidatorRewardsPool sends a MsgDepositValidatorRewardsPool transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgDepositValidatorRewardsPool message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgDepositValidatorRewardsPoolResponse>> SendMsgDepositValidatorRewardsPool(MsgDepositValidatorRewardsPool msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgDepositValidatorRewardsPoolResponse>(
				r.Result,
				MsgDepositValidatorRewardsPoolResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgDepositValidatorRewardsPool simulates a MsgDepositValidatorRewardsPool transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDepositValidatorRewardsPool message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDepositValidatorRewardsPool(MsgDepositValidatorRewardsPool msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgDepositValidatorRewardsPool simulates, estimates fees and then sends a DepositValidatorRewardsPool transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDepositValidatorRewardsPool message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgDepositValidatorRewardsPoolResponse>> SimulateAndSendMsgDepositValidatorRewardsPool(MsgDepositValidatorRewardsPool msg) {
			return SimulateMsgDepositValidatorRewardsPool(msg).ContinueWith(r => {
				return SendMsgDepositValidatorRewardsPool(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
