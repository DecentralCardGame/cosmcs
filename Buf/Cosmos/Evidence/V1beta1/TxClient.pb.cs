// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cosmos/evidence/v1beta1/tx.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Evidence.V1beta1 {
	
	public class MsgClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public MsgClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgSubmitEvidence sends a MsgSubmitEvidence transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitEvidence message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSubmitEvidenceResponse>> SendMsgSubmitEvidence(MsgSubmitEvidence msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.evidence.v1beta1.MsgSubmitEvidence"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSubmitEvidenceResponse>(
				r.Result,
				MsgSubmitEvidenceResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSubmitEvidence simulates a MsgSubmitEvidence transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitEvidence message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSubmitEvidence(MsgSubmitEvidence msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.evidence.v1beta1.MsgSubmitEvidence"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSubmitEvidence simulates, estimates fees and then sends a SubmitEvidence transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitEvidence message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSubmitEvidenceResponse>> SimulateAndSendMsgSubmitEvidence(MsgSubmitEvidence msg) {
			return SimulateMsgSubmitEvidence(msg).ContinueWith(r => {
				return SendMsgSubmitEvidence(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
