// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cosmos/gov/v1/tx.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Gov.V1 {
	
	public class MsgClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public MsgClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgSubmitProposal sends a MsgSubmitProposal transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitProposal message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSubmitProposalResponse>> SendMsgSubmitProposal(MsgSubmitProposal msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgSubmitProposal"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSubmitProposalResponse>(
				r.Result,
				MsgSubmitProposalResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSubmitProposal simulates a MsgSubmitProposal transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitProposal message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSubmitProposal(MsgSubmitProposal msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgSubmitProposal"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSubmitProposal simulates, estimates fees and then sends a SubmitProposal transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSubmitProposal message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSubmitProposalResponse>> SimulateAndSendMsgSubmitProposal(MsgSubmitProposal msg) {
			return SimulateMsgSubmitProposal(msg).ContinueWith(r => {
				return SendMsgSubmitProposal(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgExecLegacyContent sends a MsgExecLegacyContent transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgExecLegacyContent message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgExecLegacyContentResponse>> SendMsgExecLegacyContent(MsgExecLegacyContent msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgExecLegacyContent"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgExecLegacyContentResponse>(
				r.Result,
				MsgExecLegacyContentResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgExecLegacyContent simulates a MsgExecLegacyContent transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgExecLegacyContent message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgExecLegacyContent(MsgExecLegacyContent msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgExecLegacyContent"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgExecLegacyContent simulates, estimates fees and then sends a ExecLegacyContent transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgExecLegacyContent message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgExecLegacyContentResponse>> SimulateAndSendMsgExecLegacyContent(MsgExecLegacyContent msg) {
			return SimulateMsgExecLegacyContent(msg).ContinueWith(r => {
				return SendMsgExecLegacyContent(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgVote sends a MsgVote transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgVote message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgVoteResponse>> SendMsgVote(MsgVote msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVote"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgVoteResponse>(
				r.Result,
				MsgVoteResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgVote simulates a MsgVote transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVote message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgVote(MsgVote msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVote"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgVote simulates, estimates fees and then sends a Vote transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVote message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgVoteResponse>> SimulateAndSendMsgVote(MsgVote msg) {
			return SimulateMsgVote(msg).ContinueWith(r => {
				return SendMsgVote(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgVoteWeighted sends a MsgVoteWeighted transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgVoteWeighted message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgVoteWeightedResponse>> SendMsgVoteWeighted(MsgVoteWeighted msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVoteWeighted"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgVoteWeightedResponse>(
				r.Result,
				MsgVoteWeightedResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgVoteWeighted simulates a MsgVoteWeighted transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVoteWeighted message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgVoteWeighted(MsgVoteWeighted msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVoteWeighted"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgVoteWeighted simulates, estimates fees and then sends a VoteWeighted transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVoteWeighted message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgVoteWeightedResponse>> SimulateAndSendMsgVoteWeighted(MsgVoteWeighted msg) {
			return SimulateMsgVoteWeighted(msg).ContinueWith(r => {
				return SendMsgVoteWeighted(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgDeposit sends a MsgDeposit transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgDeposit message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgDepositResponse>> SendMsgDeposit(MsgDeposit msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgDeposit"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgDepositResponse>(
				r.Result,
				MsgDepositResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgDeposit simulates a MsgDeposit transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDeposit message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDeposit(MsgDeposit msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgDeposit"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgDeposit simulates, estimates fees and then sends a Deposit transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDeposit message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgDepositResponse>> SimulateAndSendMsgDeposit(MsgDeposit msg) {
			return SimulateMsgDeposit(msg).ContinueWith(r => {
				return SendMsgDeposit(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgUpdateParams sends a MsgUpdateParams transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SendMsgUpdateParams(MsgUpdateParams msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgUpdateParams"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>(
				r.Result,
				MsgUpdateParamsResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgUpdateParams simulates a MsgUpdateParams transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgUpdateParams(MsgUpdateParams msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgUpdateParams"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgUpdateParams simulates, estimates fees and then sends a UpdateParams transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SimulateAndSendMsgUpdateParams(MsgUpdateParams msg) {
			return SimulateMsgUpdateParams(msg).ContinueWith(r => {
				return SendMsgUpdateParams(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCancelProposal sends a MsgCancelProposal transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCancelProposal message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCancelProposalResponse>> SendMsgCancelProposal(MsgCancelProposal msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgCancelProposal"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCancelProposalResponse>(
				r.Result,
				MsgCancelProposalResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCancelProposal simulates a MsgCancelProposal transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCancelProposal message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCancelProposal(MsgCancelProposal msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgCancelProposal"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCancelProposal simulates, estimates fees and then sends a CancelProposal transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCancelProposal message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCancelProposalResponse>> SimulateAndSendMsgCancelProposal(MsgCancelProposal msg) {
			return SimulateMsgCancelProposal(msg).ContinueWith(r => {
				return SendMsgCancelProposal(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
