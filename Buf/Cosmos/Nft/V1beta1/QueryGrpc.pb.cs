// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmos/nft/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cosmos.Nft.V1beta1 {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "cosmos.nft.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryBalanceRequest> __Marshaller_cosmos_nft_v1beta1_QueryBalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryBalanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryBalanceResponse> __Marshaller_cosmos_nft_v1beta1_QueryBalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryBalanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryOwnerRequest> __Marshaller_cosmos_nft_v1beta1_QueryOwnerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryOwnerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryOwnerResponse> __Marshaller_cosmos_nft_v1beta1_QueryOwnerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryOwnerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QuerySupplyRequest> __Marshaller_cosmos_nft_v1beta1_QuerySupplyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QuerySupplyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QuerySupplyResponse> __Marshaller_cosmos_nft_v1beta1_QuerySupplyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QuerySupplyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryNFTsRequest> __Marshaller_cosmos_nft_v1beta1_QueryNFTsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryNFTsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryNFTsResponse> __Marshaller_cosmos_nft_v1beta1_QueryNFTsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryNFTsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryNFTRequest> __Marshaller_cosmos_nft_v1beta1_QueryNFTRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryNFTRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryNFTResponse> __Marshaller_cosmos_nft_v1beta1_QueryNFTResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryNFTResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryClassRequest> __Marshaller_cosmos_nft_v1beta1_QueryClassRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryClassRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryClassResponse> __Marshaller_cosmos_nft_v1beta1_QueryClassResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryClassResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryClassesRequest> __Marshaller_cosmos_nft_v1beta1_QueryClassesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryClassesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Nft.V1beta1.QueryClassesResponse> __Marshaller_cosmos_nft_v1beta1_QueryClassesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Nft.V1beta1.QueryClassesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryBalanceRequest, global::Cosmos.Nft.V1beta1.QueryBalanceResponse> __Method_Balance = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryBalanceRequest, global::Cosmos.Nft.V1beta1.QueryBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Balance",
        __Marshaller_cosmos_nft_v1beta1_QueryBalanceRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryBalanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryOwnerRequest, global::Cosmos.Nft.V1beta1.QueryOwnerResponse> __Method_Owner = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryOwnerRequest, global::Cosmos.Nft.V1beta1.QueryOwnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Owner",
        __Marshaller_cosmos_nft_v1beta1_QueryOwnerRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryOwnerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QuerySupplyRequest, global::Cosmos.Nft.V1beta1.QuerySupplyResponse> __Method_Supply = new grpc::Method<global::Cosmos.Nft.V1beta1.QuerySupplyRequest, global::Cosmos.Nft.V1beta1.QuerySupplyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Supply",
        __Marshaller_cosmos_nft_v1beta1_QuerySupplyRequest,
        __Marshaller_cosmos_nft_v1beta1_QuerySupplyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryNFTsRequest, global::Cosmos.Nft.V1beta1.QueryNFTsResponse> __Method_NFTs = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryNFTsRequest, global::Cosmos.Nft.V1beta1.QueryNFTsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NFTs",
        __Marshaller_cosmos_nft_v1beta1_QueryNFTsRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryNFTsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryNFTRequest, global::Cosmos.Nft.V1beta1.QueryNFTResponse> __Method_NFT = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryNFTRequest, global::Cosmos.Nft.V1beta1.QueryNFTResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NFT",
        __Marshaller_cosmos_nft_v1beta1_QueryNFTRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryNFTResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryClassRequest, global::Cosmos.Nft.V1beta1.QueryClassResponse> __Method_Class = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryClassRequest, global::Cosmos.Nft.V1beta1.QueryClassResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Class",
        __Marshaller_cosmos_nft_v1beta1_QueryClassRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryClassResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Nft.V1beta1.QueryClassesRequest, global::Cosmos.Nft.V1beta1.QueryClassesResponse> __Method_Classes = new grpc::Method<global::Cosmos.Nft.V1beta1.QueryClassesRequest, global::Cosmos.Nft.V1beta1.QueryClassesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Classes",
        __Marshaller_cosmos_nft_v1beta1_QueryClassesRequest,
        __Marshaller_cosmos_nft_v1beta1_QueryClassesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cosmos.Nft.V1beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryBalanceResponse Balance(global::Cosmos.Nft.V1beta1.QueryBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Balance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryBalanceResponse Balance(global::Cosmos.Nft.V1beta1.QueryBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Balance, null, options, request);
      }
      /// <summary>
      /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryBalanceResponse> BalanceAsync(global::Cosmos.Nft.V1beta1.QueryBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryBalanceResponse> BalanceAsync(global::Cosmos.Nft.V1beta1.QueryBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Balance, null, options, request);
      }
      /// <summary>
      /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryOwnerResponse Owner(global::Cosmos.Nft.V1beta1.QueryOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Owner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryOwnerResponse Owner(global::Cosmos.Nft.V1beta1.QueryOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Owner, null, options, request);
      }
      /// <summary>
      /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryOwnerResponse> OwnerAsync(global::Cosmos.Nft.V1beta1.QueryOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryOwnerResponse> OwnerAsync(global::Cosmos.Nft.V1beta1.QueryOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Owner, null, options, request);
      }
      /// <summary>
      /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QuerySupplyResponse Supply(global::Cosmos.Nft.V1beta1.QuerySupplyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Supply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QuerySupplyResponse Supply(global::Cosmos.Nft.V1beta1.QuerySupplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Supply, null, options, request);
      }
      /// <summary>
      /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QuerySupplyResponse> SupplyAsync(global::Cosmos.Nft.V1beta1.QuerySupplyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SupplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QuerySupplyResponse> SupplyAsync(global::Cosmos.Nft.V1beta1.QuerySupplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Supply, null, options, request);
      }
      /// <summary>
      /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
      /// ERC721Enumerable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryNFTsResponse NFTs(global::Cosmos.Nft.V1beta1.QueryNFTsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NFTs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
      /// ERC721Enumerable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryNFTsResponse NFTs(global::Cosmos.Nft.V1beta1.QueryNFTsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NFTs, null, options, request);
      }
      /// <summary>
      /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
      /// ERC721Enumerable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryNFTsResponse> NFTsAsync(global::Cosmos.Nft.V1beta1.QueryNFTsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NFTsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
      /// ERC721Enumerable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryNFTsResponse> NFTsAsync(global::Cosmos.Nft.V1beta1.QueryNFTsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NFTs, null, options, request);
      }
      /// <summary>
      /// NFT queries an NFT based on its class and id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryNFTResponse NFT(global::Cosmos.Nft.V1beta1.QueryNFTRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NFT(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NFT queries an NFT based on its class and id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryNFTResponse NFT(global::Cosmos.Nft.V1beta1.QueryNFTRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NFT, null, options, request);
      }
      /// <summary>
      /// NFT queries an NFT based on its class and id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryNFTResponse> NFTAsync(global::Cosmos.Nft.V1beta1.QueryNFTRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NFTAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NFT queries an NFT based on its class and id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryNFTResponse> NFTAsync(global::Cosmos.Nft.V1beta1.QueryNFTRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NFT, null, options, request);
      }
      /// <summary>
      /// Class queries an NFT class based on its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryClassResponse Class(global::Cosmos.Nft.V1beta1.QueryClassRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Class(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Class queries an NFT class based on its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryClassResponse Class(global::Cosmos.Nft.V1beta1.QueryClassRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Class, null, options, request);
      }
      /// <summary>
      /// Class queries an NFT class based on its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryClassResponse> ClassAsync(global::Cosmos.Nft.V1beta1.QueryClassRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClassAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Class queries an NFT class based on its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryClassResponse> ClassAsync(global::Cosmos.Nft.V1beta1.QueryClassRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Class, null, options, request);
      }
      /// <summary>
      /// Classes queries all NFT classes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryClassesResponse Classes(global::Cosmos.Nft.V1beta1.QueryClassesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Classes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Classes queries all NFT classes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Nft.V1beta1.QueryClassesResponse Classes(global::Cosmos.Nft.V1beta1.QueryClassesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Classes, null, options, request);
      }
      /// <summary>
      /// Classes queries all NFT classes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryClassesResponse> ClassesAsync(global::Cosmos.Nft.V1beta1.QueryClassesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClassesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Classes queries all NFT classes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Nft.V1beta1.QueryClassesResponse> ClassesAsync(global::Cosmos.Nft.V1beta1.QueryClassesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Classes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

  }
}
#endregion
