// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cosmos/staking/v1beta1/tx.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Staking.V1beta1 {
	
	public class MsgClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public MsgClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgCreateValidator sends a MsgCreateValidator transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCreateValidator message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCreateValidatorResponse>> SendMsgCreateValidator(MsgCreateValidator msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgCreateValidator"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCreateValidatorResponse>(
				r.Result,
				MsgCreateValidatorResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCreateValidator simulates a MsgCreateValidator transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateValidator message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateValidator(MsgCreateValidator msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgCreateValidator"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCreateValidator simulates, estimates fees and then sends a CreateValidator transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateValidator message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCreateValidatorResponse>> SimulateAndSendMsgCreateValidator(MsgCreateValidator msg) {
			return SimulateMsgCreateValidator(msg).ContinueWith(r => {
				return SendMsgCreateValidator(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgEditValidator sends a MsgEditValidator transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgEditValidator message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgEditValidatorResponse>> SendMsgEditValidator(MsgEditValidator msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgEditValidator"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgEditValidatorResponse>(
				r.Result,
				MsgEditValidatorResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgEditValidator simulates a MsgEditValidator transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEditValidator message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgEditValidator(MsgEditValidator msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgEditValidator"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgEditValidator simulates, estimates fees and then sends a EditValidator transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEditValidator message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgEditValidatorResponse>> SimulateAndSendMsgEditValidator(MsgEditValidator msg) {
			return SimulateMsgEditValidator(msg).ContinueWith(r => {
				return SendMsgEditValidator(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgDelegate sends a MsgDelegate transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgDelegate message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgDelegateResponse>> SendMsgDelegate(MsgDelegate msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgDelegate"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgDelegateResponse>(
				r.Result,
				MsgDelegateResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgDelegate simulates a MsgDelegate transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDelegate message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDelegate(MsgDelegate msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgDelegate"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgDelegate simulates, estimates fees and then sends a Delegate transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDelegate message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgDelegateResponse>> SimulateAndSendMsgDelegate(MsgDelegate msg) {
			return SimulateMsgDelegate(msg).ContinueWith(r => {
				return SendMsgDelegate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgBeginRedelegate sends a MsgBeginRedelegate transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgBeginRedelegate message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgBeginRedelegateResponse>> SendMsgBeginRedelegate(MsgBeginRedelegate msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgBeginRedelegate"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgBeginRedelegateResponse>(
				r.Result,
				MsgBeginRedelegateResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgBeginRedelegate simulates a MsgBeginRedelegate transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBeginRedelegate message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBeginRedelegate(MsgBeginRedelegate msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgBeginRedelegate"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgBeginRedelegate simulates, estimates fees and then sends a BeginRedelegate transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBeginRedelegate message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgBeginRedelegateResponse>> SimulateAndSendMsgBeginRedelegate(MsgBeginRedelegate msg) {
			return SimulateMsgBeginRedelegate(msg).ContinueWith(r => {
				return SendMsgBeginRedelegate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgUndelegate sends a MsgUndelegate transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgUndelegate message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgUndelegateResponse>> SendMsgUndelegate(MsgUndelegate msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgUndelegate"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgUndelegateResponse>(
				r.Result,
				MsgUndelegateResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgUndelegate simulates a MsgUndelegate transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUndelegate message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgUndelegate(MsgUndelegate msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgUndelegate"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgUndelegate simulates, estimates fees and then sends a Undelegate transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUndelegate message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgUndelegateResponse>> SimulateAndSendMsgUndelegate(MsgUndelegate msg) {
			return SimulateMsgUndelegate(msg).ContinueWith(r => {
				return SendMsgUndelegate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCancelUnbondingDelegation sends a MsgCancelUnbondingDelegation transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCancelUnbondingDelegation message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCancelUnbondingDelegationResponse>> SendMsgCancelUnbondingDelegation(MsgCancelUnbondingDelegation msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCancelUnbondingDelegationResponse>(
				r.Result,
				MsgCancelUnbondingDelegationResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCancelUnbondingDelegation simulates a MsgCancelUnbondingDelegation transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCancelUnbondingDelegation message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCancelUnbondingDelegation(MsgCancelUnbondingDelegation msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCancelUnbondingDelegation simulates, estimates fees and then sends a CancelUnbondingDelegation transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCancelUnbondingDelegation message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCancelUnbondingDelegationResponse>> SimulateAndSendMsgCancelUnbondingDelegation(MsgCancelUnbondingDelegation msg) {
			return SimulateMsgCancelUnbondingDelegation(msg).ContinueWith(r => {
				return SendMsgCancelUnbondingDelegation(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgUpdateParams sends a MsgUpdateParams transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SendMsgUpdateParams(MsgUpdateParams msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgUpdateParams"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>(
				r.Result,
				MsgUpdateParamsResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgUpdateParams simulates a MsgUpdateParams transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgUpdateParams(MsgUpdateParams msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.staking.v1beta1.MsgUpdateParams"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgUpdateParams simulates, estimates fees and then sends a UpdateParams transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgUpdateParams message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgUpdateParamsResponse>> SimulateAndSendMsgUpdateParams(MsgUpdateParams msg) {
			return SimulateMsgUpdateParams(msg).ContinueWith(r => {
				return SendMsgUpdateParams(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
