// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cosmos/tx/v1beta1/service.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Tx.V1beta1 {
	
	public class ServiceClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public ServiceClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgSimulate sends a SimulateRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The SimulateRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<SimulateResponse>> SendMsgSimulate(SimulateRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.SimulateRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<SimulateResponse>(
				r.Result,
				SimulateResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSimulate simulates a SimulateRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The SimulateRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSimulate(SimulateRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.SimulateRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSimulate simulates, estimates fees and then sends a Simulate transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The SimulateRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<SimulateResponse>> SimulateAndSendMsgSimulate(SimulateRequest msg) {
			return SimulateMsgSimulate(msg).ContinueWith(r => {
				return SendMsgSimulate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgGetTx sends a GetTxRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The GetTxRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<GetTxResponse>> SendMsgGetTx(GetTxRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<GetTxResponse>(
				r.Result,
				GetTxResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgGetTx simulates a GetTxRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetTxRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetTx(GetTxRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgGetTx simulates, estimates fees and then sends a GetTx transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetTxRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<GetTxResponse>> SimulateAndSendMsgGetTx(GetTxRequest msg) {
			return SimulateMsgGetTx(msg).ContinueWith(r => {
				return SendMsgGetTx(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgBroadcastTx sends a BroadcastTxRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The BroadcastTxRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<BroadcastTxResponse>> SendMsgBroadcastTx(BroadcastTxRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.BroadcastTxRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<BroadcastTxResponse>(
				r.Result,
				BroadcastTxResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgBroadcastTx simulates a BroadcastTxRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The BroadcastTxRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBroadcastTx(BroadcastTxRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.BroadcastTxRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgBroadcastTx simulates, estimates fees and then sends a BroadcastTx transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The BroadcastTxRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<BroadcastTxResponse>> SimulateAndSendMsgBroadcastTx(BroadcastTxRequest msg) {
			return SimulateMsgBroadcastTx(msg).ContinueWith(r => {
				return SendMsgBroadcastTx(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgGetTxsEvent sends a GetTxsEventRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The GetTxsEventRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<GetTxsEventResponse>> SendMsgGetTxsEvent(GetTxsEventRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxsEventRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<GetTxsEventResponse>(
				r.Result,
				GetTxsEventResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgGetTxsEvent simulates a GetTxsEventRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetTxsEventRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetTxsEvent(GetTxsEventRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxsEventRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgGetTxsEvent simulates, estimates fees and then sends a GetTxsEvent transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetTxsEventRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<GetTxsEventResponse>> SimulateAndSendMsgGetTxsEvent(GetTxsEventRequest msg) {
			return SimulateMsgGetTxsEvent(msg).ContinueWith(r => {
				return SendMsgGetTxsEvent(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgGetBlockWithTxs sends a GetBlockWithTxsRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The GetBlockWithTxsRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<GetBlockWithTxsResponse>> SendMsgGetBlockWithTxs(GetBlockWithTxsRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetBlockWithTxsRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<GetBlockWithTxsResponse>(
				r.Result,
				GetBlockWithTxsResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgGetBlockWithTxs simulates a GetBlockWithTxsRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetBlockWithTxsRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetBlockWithTxs(GetBlockWithTxsRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetBlockWithTxsRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgGetBlockWithTxs simulates, estimates fees and then sends a GetBlockWithTxs transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The GetBlockWithTxsRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<GetBlockWithTxsResponse>> SimulateAndSendMsgGetBlockWithTxs(GetBlockWithTxsRequest msg) {
			return SimulateMsgGetBlockWithTxs(msg).ContinueWith(r => {
				return SendMsgGetBlockWithTxs(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTxDecode sends a TxDecodeRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The TxDecodeRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<TxDecodeResponse>> SendMsgTxDecode(TxDecodeRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<TxDecodeResponse>(
				r.Result,
				TxDecodeResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTxDecode simulates a TxDecodeRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxDecodeRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxDecode(TxDecodeRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTxDecode simulates, estimates fees and then sends a TxDecode transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxDecodeRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<TxDecodeResponse>> SimulateAndSendMsgTxDecode(TxDecodeRequest msg) {
			return SimulateMsgTxDecode(msg).ContinueWith(r => {
				return SendMsgTxDecode(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTxEncode sends a TxEncodeRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The TxEncodeRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<TxEncodeResponse>> SendMsgTxEncode(TxEncodeRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<TxEncodeResponse>(
				r.Result,
				TxEncodeResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTxEncode simulates a TxEncodeRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxEncodeRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxEncode(TxEncodeRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTxEncode simulates, estimates fees and then sends a TxEncode transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxEncodeRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<TxEncodeResponse>> SimulateAndSendMsgTxEncode(TxEncodeRequest msg) {
			return SimulateMsgTxEncode(msg).ContinueWith(r => {
				return SendMsgTxEncode(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTxEncodeAmino sends a TxEncodeAminoRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The TxEncodeAminoRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<TxEncodeAminoResponse>> SendMsgTxEncodeAmino(TxEncodeAminoRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeAminoRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<TxEncodeAminoResponse>(
				r.Result,
				TxEncodeAminoResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTxEncodeAmino simulates a TxEncodeAminoRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxEncodeAminoRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxEncodeAmino(TxEncodeAminoRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeAminoRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTxEncodeAmino simulates, estimates fees and then sends a TxEncodeAmino transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxEncodeAminoRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<TxEncodeAminoResponse>> SimulateAndSendMsgTxEncodeAmino(TxEncodeAminoRequest msg) {
			return SimulateMsgTxEncodeAmino(msg).ContinueWith(r => {
				return SendMsgTxEncodeAmino(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTxDecodeAmino sends a TxDecodeAminoRequest transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The TxDecodeAminoRequest message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<TxDecodeAminoResponse>> SendMsgTxDecodeAmino(TxDecodeAminoRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeAminoRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<TxDecodeAminoResponse>(
				r.Result,
				TxDecodeAminoResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTxDecodeAmino simulates a TxDecodeAminoRequest transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxDecodeAminoRequest message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxDecodeAmino(TxDecodeAminoRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeAminoRequest"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTxDecodeAmino simulates, estimates fees and then sends a TxDecodeAmino transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The TxDecodeAminoRequest message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<TxDecodeAminoResponse>> SimulateAndSendMsgTxDecodeAmino(TxDecodeAminoRequest msg) {
			return SimulateMsgTxDecodeAmino(msg).ContinueWith(r => {
				return SendMsgTxDecodeAmino(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
