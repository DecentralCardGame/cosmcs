// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Tx.V1beta1 {
	
	public class ServiceClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public ServiceClient (IClient client) {
			Client = client;
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.SimulateResponse>> SendMsgSimulate(Cosmos.Tx.V1beta1.SimulateRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.SimulateRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.SimulateResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.SimulateResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSimulate(Cosmos.Tx.V1beta1.SimulateRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.SimulateRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.SimulateResponse>> SimulateAndSendMsgSimulate(Cosmos.Tx.V1beta1.SimulateRequest msg) {
			return SimulateMsgSimulate(msg).ContinueWith(r => {
				return SendMsgSimulate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxResponse>> SendMsgGetTx(Cosmos.Tx.V1beta1.GetTxRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.GetTxResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetTx(Cosmos.Tx.V1beta1.GetTxRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxResponse>> SimulateAndSendMsgGetTx(Cosmos.Tx.V1beta1.GetTxRequest msg) {
			return SimulateMsgGetTx(msg).ContinueWith(r => {
				return SendMsgGetTx(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.BroadcastTxResponse>> SendMsgBroadcastTx(Cosmos.Tx.V1beta1.BroadcastTxRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.BroadcastTxRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.BroadcastTxResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.BroadcastTxResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBroadcastTx(Cosmos.Tx.V1beta1.BroadcastTxRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.BroadcastTxRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.BroadcastTxResponse>> SimulateAndSendMsgBroadcastTx(Cosmos.Tx.V1beta1.BroadcastTxRequest msg) {
			return SimulateMsgBroadcastTx(msg).ContinueWith(r => {
				return SendMsgBroadcastTx(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxsEventResponse>> SendMsgGetTxsEvent(Cosmos.Tx.V1beta1.GetTxsEventRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxsEventRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxsEventResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.GetTxsEventResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetTxsEvent(Cosmos.Tx.V1beta1.GetTxsEventRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetTxsEventRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetTxsEventResponse>> SimulateAndSendMsgGetTxsEvent(Cosmos.Tx.V1beta1.GetTxsEventRequest msg) {
			return SimulateMsgGetTxsEvent(msg).ContinueWith(r => {
				return SendMsgGetTxsEvent(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetBlockWithTxsResponse>> SendMsgGetBlockWithTxs(Cosmos.Tx.V1beta1.GetBlockWithTxsRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetBlockWithTxsRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetBlockWithTxsResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.GetBlockWithTxsResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGetBlockWithTxs(Cosmos.Tx.V1beta1.GetBlockWithTxsRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.GetBlockWithTxsRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.GetBlockWithTxsResponse>> SimulateAndSendMsgGetBlockWithTxs(Cosmos.Tx.V1beta1.GetBlockWithTxsRequest msg) {
			return SimulateMsgGetBlockWithTxs(msg).ContinueWith(r => {
				return SendMsgGetBlockWithTxs(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeResponse>> SendMsgTxDecode(Cosmos.Tx.V1beta1.TxDecodeRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.TxDecodeResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxDecode(Cosmos.Tx.V1beta1.TxDecodeRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeResponse>> SimulateAndSendMsgTxDecode(Cosmos.Tx.V1beta1.TxDecodeRequest msg) {
			return SimulateMsgTxDecode(msg).ContinueWith(r => {
				return SendMsgTxDecode(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeResponse>> SendMsgTxEncode(Cosmos.Tx.V1beta1.TxEncodeRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.TxEncodeResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxEncode(Cosmos.Tx.V1beta1.TxEncodeRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeResponse>> SimulateAndSendMsgTxEncode(Cosmos.Tx.V1beta1.TxEncodeRequest msg) {
			return SimulateMsgTxEncode(msg).ContinueWith(r => {
				return SendMsgTxEncode(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeAminoResponse>> SendMsgTxEncodeAmino(Cosmos.Tx.V1beta1.TxEncodeAminoRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeAminoRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeAminoResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.TxEncodeAminoResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxEncodeAmino(Cosmos.Tx.V1beta1.TxEncodeAminoRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxEncodeAminoRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxEncodeAminoResponse>> SimulateAndSendMsgTxEncodeAmino(Cosmos.Tx.V1beta1.TxEncodeAminoRequest msg) {
			return SimulateMsgTxEncodeAmino(msg).ContinueWith(r => {
				return SendMsgTxEncodeAmino(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeAminoResponse>> SendMsgTxDecodeAmino(Cosmos.Tx.V1beta1.TxDecodeAminoRequest msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeAminoRequest"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeAminoResponse>(
				r.Result,
				Cosmos.Tx.V1beta1.TxDecodeAminoResponse.Parser
			));
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTxDecodeAmino(Cosmos.Tx.V1beta1.TxDecodeAminoRequest msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.tx.v1beta1.TxDecodeAminoRequest"
				}}
			);
		}

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmosCsharp", null)]
		public Task<Cosmcs.Client.ClientResponse<Cosmos.Tx.V1beta1.TxDecodeAminoResponse>> SimulateAndSendMsgTxDecodeAmino(Cosmos.Tx.V1beta1.TxDecodeAminoRequest msg) {
			return SimulateMsgTxDecodeAmino(msg).ContinueWith(r => {
				return SendMsgTxDecodeAmino(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
