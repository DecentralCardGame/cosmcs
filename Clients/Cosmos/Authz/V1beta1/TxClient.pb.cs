// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Authz.V1beta1 {
	
	public class MsgClient {
		public IClient Client { get; }

		public MsgClient (IClient client) {
			Client = client;
		}
        
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgGrantResponse>> SendMsgGrant(Cosmos.Authz.V1beta1.MsgGrant msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgGrant"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgGrantResponse>(
				r.Result,
				Cosmos.Authz.V1beta1.MsgGrantResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgGrant(Cosmos.Authz.V1beta1.MsgGrant msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgGrant"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgGrantResponse>> SimulateAndSendMsgGrant(Cosmos.Authz.V1beta1.MsgGrant msg) {
			return SimulateMsgGrant(msg).ContinueWith(r => {
				return SendMsgGrant(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgExecResponse>> SendMsgExec(Cosmos.Authz.V1beta1.MsgExec msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgExec"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgExecResponse>(
				r.Result,
				Cosmos.Authz.V1beta1.MsgExecResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgExec(Cosmos.Authz.V1beta1.MsgExec msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgExec"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgExecResponse>> SimulateAndSendMsgExec(Cosmos.Authz.V1beta1.MsgExec msg) {
			return SimulateMsgExec(msg).ContinueWith(r => {
				return SendMsgExec(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgRevokeResponse>> SendMsgRevoke(Cosmos.Authz.V1beta1.MsgRevoke msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgRevoke"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgRevokeResponse>(
				r.Result,
				Cosmos.Authz.V1beta1.MsgRevokeResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRevoke(Cosmos.Authz.V1beta1.MsgRevoke msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.authz.v1beta1.MsgRevoke"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Authz.V1beta1.MsgRevokeResponse>> SimulateAndSendMsgRevoke(Cosmos.Authz.V1beta1.MsgRevoke msg) {
			return SimulateMsgRevoke(msg).ContinueWith(r => {
				return SendMsgRevoke(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
