// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>

using Cosmcs.Client;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Gov.V1 {
	
	public class MsgClient {
		public IClient Client { get; }

		public MsgClient (IClient client) {
			Client = client;
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgSubmitProposalResponse>> SendMsgSubmitProposal(Cosmos.Gov.V1.MsgSubmitProposal msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgSubmitProposal"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgSubmitProposalResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgSubmitProposalResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgExecLegacyContentResponse>> SendMsgExecLegacyContent(Cosmos.Gov.V1.MsgExecLegacyContent msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgExecLegacyContent"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgExecLegacyContentResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgExecLegacyContentResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgVoteResponse>> SendMsgVote(Cosmos.Gov.V1.MsgVote msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVote"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgVoteResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgVoteResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgVoteWeightedResponse>> SendMsgVoteWeighted(Cosmos.Gov.V1.MsgVoteWeighted msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgVoteWeighted"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgVoteWeightedResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgVoteWeightedResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgDepositResponse>> SendMsgDeposit(Cosmos.Gov.V1.MsgDeposit msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgDeposit"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgDepositResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgDepositResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgUpdateParamsResponse>> SendMsgUpdateParams(Cosmos.Gov.V1.MsgUpdateParams msg) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1.MsgUpdateParams"
				}}
			).ContinueWith(r =>
			{
				System.Threading.Thread.Sleep(10000);
				return r.Result;
			})
			.ContinueWith(r => Client.QueryTx(r.Result.TxResponse.Txhash))
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1.MsgUpdateParamsResponse>(
				r.Result.Result.TxResponse,
				Cosmos.Gov.V1.MsgUpdateParamsResponse.Parser
			));
		}

	}
}
