// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>
#nullable enable

using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace Cosmos.Gov.V1beta1 {
	
	public class MsgClient {
		public IClient Client { get; }

		public MsgClient (IClient client) {
			Client = client;
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgSubmitProposalResponse>> SendMsgSubmitProposal(Cosmos.Gov.V1beta1.MsgSubmitProposal msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1beta1.MsgSubmitProposal"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgSubmitProposalResponse>(
				r.Result,
				Cosmos.Gov.V1beta1.MsgSubmitProposalResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgVoteResponse>> SendMsgVote(Cosmos.Gov.V1beta1.MsgVote msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1beta1.MsgVote"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgVoteResponse>(
				r.Result,
				Cosmos.Gov.V1beta1.MsgVoteResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgVoteWeightedResponse>> SendMsgVoteWeighted(Cosmos.Gov.V1beta1.MsgVoteWeighted msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1beta1.MsgVoteWeighted"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgVoteWeightedResponse>(
				r.Result,
				Cosmos.Gov.V1beta1.MsgVoteWeightedResponse.Parser
			));
		}

		public Task<Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgDepositResponse>> SendMsgDeposit(Cosmos.Gov.V1beta1.MsgDeposit msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/cosmos.gov.v1beta1.MsgDeposit"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<Cosmos.Gov.V1beta1.MsgDepositResponse>(
				r.Result,
				Cosmos.Gov.V1beta1.MsgDepositResponse.Parser
			));
		}

	}
}
