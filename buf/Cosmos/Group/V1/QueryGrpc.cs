// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmos/group/v1/query.proto
// </auto-generated>
// Original file comments:
// Since: cosmos-sdk 0.46
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cosmos.Group.V1 {
  /// <summary>
  /// Query is the cosmos.group.v1 Query service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "cosmos.group.v1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupInfoRequest> __Marshaller_cosmos_group_v1_QueryGroupInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupInfoResponse> __Marshaller_cosmos_group_v1_QueryGroupInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest> __Marshaller_cosmos_group_v1_QueryGroupPolicyInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse> __Marshaller_cosmos_group_v1_QueryGroupPolicyInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupMembersRequest> __Marshaller_cosmos_group_v1_QueryGroupMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupMembersResponse> __Marshaller_cosmos_group_v1_QueryGroupMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsByAdminRequest> __Marshaller_cosmos_group_v1_QueryGroupsByAdminRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsByAdminRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsByAdminResponse> __Marshaller_cosmos_group_v1_QueryGroupsByAdminResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsByAdminResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest> __Marshaller_cosmos_group_v1_QueryGroupPoliciesByGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse> __Marshaller_cosmos_group_v1_QueryGroupPoliciesByGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest> __Marshaller_cosmos_group_v1_QueryGroupPoliciesByAdminRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse> __Marshaller_cosmos_group_v1_QueryGroupPoliciesByAdminResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryProposalRequest> __Marshaller_cosmos_group_v1_QueryProposalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryProposalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryProposalResponse> __Marshaller_cosmos_group_v1_QueryProposalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryProposalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest> __Marshaller_cosmos_group_v1_QueryProposalsByGroupPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse> __Marshaller_cosmos_group_v1_QueryProposalsByGroupPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest> __Marshaller_cosmos_group_v1_QueryVoteByProposalVoterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse> __Marshaller_cosmos_group_v1_QueryVoteByProposalVoterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVotesByProposalRequest> __Marshaller_cosmos_group_v1_QueryVotesByProposalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVotesByProposalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVotesByProposalResponse> __Marshaller_cosmos_group_v1_QueryVotesByProposalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVotesByProposalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVotesByVoterRequest> __Marshaller_cosmos_group_v1_QueryVotesByVoterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVotesByVoterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryVotesByVoterResponse> __Marshaller_cosmos_group_v1_QueryVotesByVoterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryVotesByVoterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsByMemberRequest> __Marshaller_cosmos_group_v1_QueryGroupsByMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsByMemberRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsByMemberResponse> __Marshaller_cosmos_group_v1_QueryGroupsByMemberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsByMemberResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryTallyResultRequest> __Marshaller_cosmos_group_v1_QueryTallyResultRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryTallyResultRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryTallyResultResponse> __Marshaller_cosmos_group_v1_QueryTallyResultResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryTallyResultResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsRequest> __Marshaller_cosmos_group_v1_QueryGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.QueryGroupsResponse> __Marshaller_cosmos_group_v1_QueryGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.QueryGroupsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupInfoRequest, global::Cosmos.Group.V1.QueryGroupInfoResponse> __Method_GroupInfo = new grpc::Method<global::Cosmos.Group.V1.QueryGroupInfoRequest, global::Cosmos.Group.V1.QueryGroupInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupInfo",
        __Marshaller_cosmos_group_v1_QueryGroupInfoRequest,
        __Marshaller_cosmos_group_v1_QueryGroupInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest, global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse> __Method_GroupPolicyInfo = new grpc::Method<global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest, global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupPolicyInfo",
        __Marshaller_cosmos_group_v1_QueryGroupPolicyInfoRequest,
        __Marshaller_cosmos_group_v1_QueryGroupPolicyInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupMembersRequest, global::Cosmos.Group.V1.QueryGroupMembersResponse> __Method_GroupMembers = new grpc::Method<global::Cosmos.Group.V1.QueryGroupMembersRequest, global::Cosmos.Group.V1.QueryGroupMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupMembers",
        __Marshaller_cosmos_group_v1_QueryGroupMembersRequest,
        __Marshaller_cosmos_group_v1_QueryGroupMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupsByAdminRequest, global::Cosmos.Group.V1.QueryGroupsByAdminResponse> __Method_GroupsByAdmin = new grpc::Method<global::Cosmos.Group.V1.QueryGroupsByAdminRequest, global::Cosmos.Group.V1.QueryGroupsByAdminResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupsByAdmin",
        __Marshaller_cosmos_group_v1_QueryGroupsByAdminRequest,
        __Marshaller_cosmos_group_v1_QueryGroupsByAdminResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse> __Method_GroupPoliciesByGroup = new grpc::Method<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupPoliciesByGroup",
        __Marshaller_cosmos_group_v1_QueryGroupPoliciesByGroupRequest,
        __Marshaller_cosmos_group_v1_QueryGroupPoliciesByGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse> __Method_GroupPoliciesByAdmin = new grpc::Method<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupPoliciesByAdmin",
        __Marshaller_cosmos_group_v1_QueryGroupPoliciesByAdminRequest,
        __Marshaller_cosmos_group_v1_QueryGroupPoliciesByAdminResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryProposalRequest, global::Cosmos.Group.V1.QueryProposalResponse> __Method_Proposal = new grpc::Method<global::Cosmos.Group.V1.QueryProposalRequest, global::Cosmos.Group.V1.QueryProposalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Proposal",
        __Marshaller_cosmos_group_v1_QueryProposalRequest,
        __Marshaller_cosmos_group_v1_QueryProposalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest, global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse> __Method_ProposalsByGroupPolicy = new grpc::Method<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest, global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalsByGroupPolicy",
        __Marshaller_cosmos_group_v1_QueryProposalsByGroupPolicyRequest,
        __Marshaller_cosmos_group_v1_QueryProposalsByGroupPolicyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest, global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse> __Method_VoteByProposalVoter = new grpc::Method<global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest, global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteByProposalVoter",
        __Marshaller_cosmos_group_v1_QueryVoteByProposalVoterRequest,
        __Marshaller_cosmos_group_v1_QueryVoteByProposalVoterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryVotesByProposalRequest, global::Cosmos.Group.V1.QueryVotesByProposalResponse> __Method_VotesByProposal = new grpc::Method<global::Cosmos.Group.V1.QueryVotesByProposalRequest, global::Cosmos.Group.V1.QueryVotesByProposalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VotesByProposal",
        __Marshaller_cosmos_group_v1_QueryVotesByProposalRequest,
        __Marshaller_cosmos_group_v1_QueryVotesByProposalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryVotesByVoterRequest, global::Cosmos.Group.V1.QueryVotesByVoterResponse> __Method_VotesByVoter = new grpc::Method<global::Cosmos.Group.V1.QueryVotesByVoterRequest, global::Cosmos.Group.V1.QueryVotesByVoterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VotesByVoter",
        __Marshaller_cosmos_group_v1_QueryVotesByVoterRequest,
        __Marshaller_cosmos_group_v1_QueryVotesByVoterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupsByMemberRequest, global::Cosmos.Group.V1.QueryGroupsByMemberResponse> __Method_GroupsByMember = new grpc::Method<global::Cosmos.Group.V1.QueryGroupsByMemberRequest, global::Cosmos.Group.V1.QueryGroupsByMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupsByMember",
        __Marshaller_cosmos_group_v1_QueryGroupsByMemberRequest,
        __Marshaller_cosmos_group_v1_QueryGroupsByMemberResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryTallyResultRequest, global::Cosmos.Group.V1.QueryTallyResultResponse> __Method_TallyResult = new grpc::Method<global::Cosmos.Group.V1.QueryTallyResultRequest, global::Cosmos.Group.V1.QueryTallyResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TallyResult",
        __Marshaller_cosmos_group_v1_QueryTallyResultRequest,
        __Marshaller_cosmos_group_v1_QueryTallyResultResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.QueryGroupsRequest, global::Cosmos.Group.V1.QueryGroupsResponse> __Method_Groups = new grpc::Method<global::Cosmos.Group.V1.QueryGroupsRequest, global::Cosmos.Group.V1.QueryGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Groups",
        __Marshaller_cosmos_group_v1_QueryGroupsRequest,
        __Marshaller_cosmos_group_v1_QueryGroupsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cosmos.Group.V1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// GroupInfo queries group info based on group id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupInfoResponse> GroupInfo(global::Cosmos.Group.V1.QueryGroupInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupPolicyInfo queries group policy info based on account address of group policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse> GroupPolicyInfo(global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupMembers queries members of a group by group id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupMembersResponse> GroupMembers(global::Cosmos.Group.V1.QueryGroupMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupsByAdmin queries groups by admin address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupsByAdminResponse> GroupsByAdmin(global::Cosmos.Group.V1.QueryGroupsByAdminRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupPoliciesByGroup queries group policies by group id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse> GroupPoliciesByGroup(global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupPoliciesByAdmin queries group policies by admin address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse> GroupPoliciesByAdmin(global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Proposal queries a proposal based on proposal id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryProposalResponse> Proposal(global::Cosmos.Group.V1.QueryProposalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse> ProposalsByGroupPolicy(global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// VoteByProposalVoter queries a vote by proposal id and voter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse> VoteByProposalVoter(global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// VotesByProposal queries a vote by proposal id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryVotesByProposalResponse> VotesByProposal(global::Cosmos.Group.V1.QueryVotesByProposalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// VotesByVoter queries a vote by voter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryVotesByVoterResponse> VotesByVoter(global::Cosmos.Group.V1.QueryVotesByVoterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GroupsByMember queries groups by member address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupsByMemberResponse> GroupsByMember(global::Cosmos.Group.V1.QueryGroupsByMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TallyResult returns the tally result of a proposal. If the proposal is
      /// still in voting period, then this query computes the current tally state,
      /// which might not be final. On the other hand, if the proposal is final,
      /// then it simply returns the `final_tally_result` state stored in the
      /// proposal itself.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryTallyResultResponse> TallyResult(global::Cosmos.Group.V1.QueryTallyResultRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Groups queries all groups in state.
      ///
      /// Since: cosmos-sdk 0.47.1
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.QueryGroupsResponse> Groups(global::Cosmos.Group.V1.QueryGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GroupInfo queries group info based on group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupInfoResponse GroupInfo(global::Cosmos.Group.V1.QueryGroupInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupInfo queries group info based on group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupInfoResponse GroupInfo(global::Cosmos.Group.V1.QueryGroupInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupInfo, null, options, request);
      }
      /// <summary>
      /// GroupInfo queries group info based on group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupInfoResponse> GroupInfoAsync(global::Cosmos.Group.V1.QueryGroupInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupInfo queries group info based on group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupInfoResponse> GroupInfoAsync(global::Cosmos.Group.V1.QueryGroupInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupInfo, null, options, request);
      }
      /// <summary>
      /// GroupPolicyInfo queries group policy info based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse GroupPolicyInfo(global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPolicyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPolicyInfo queries group policy info based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse GroupPolicyInfo(global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupPolicyInfo, null, options, request);
      }
      /// <summary>
      /// GroupPolicyInfo queries group policy info based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse> GroupPolicyInfoAsync(global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPolicyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPolicyInfo queries group policy info based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse> GroupPolicyInfoAsync(global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupPolicyInfo, null, options, request);
      }
      /// <summary>
      /// GroupMembers queries members of a group by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupMembersResponse GroupMembers(global::Cosmos.Group.V1.QueryGroupMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupMembers queries members of a group by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupMembersResponse GroupMembers(global::Cosmos.Group.V1.QueryGroupMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupMembers, null, options, request);
      }
      /// <summary>
      /// GroupMembers queries members of a group by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupMembersResponse> GroupMembersAsync(global::Cosmos.Group.V1.QueryGroupMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupMembers queries members of a group by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupMembersResponse> GroupMembersAsync(global::Cosmos.Group.V1.QueryGroupMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupMembers, null, options, request);
      }
      /// <summary>
      /// GroupsByAdmin queries groups by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsByAdminResponse GroupsByAdmin(global::Cosmos.Group.V1.QueryGroupsByAdminRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsByAdmin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupsByAdmin queries groups by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsByAdminResponse GroupsByAdmin(global::Cosmos.Group.V1.QueryGroupsByAdminRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupsByAdmin, null, options, request);
      }
      /// <summary>
      /// GroupsByAdmin queries groups by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsByAdminResponse> GroupsByAdminAsync(global::Cosmos.Group.V1.QueryGroupsByAdminRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsByAdminAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupsByAdmin queries groups by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsByAdminResponse> GroupsByAdminAsync(global::Cosmos.Group.V1.QueryGroupsByAdminRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupsByAdmin, null, options, request);
      }
      /// <summary>
      /// GroupPoliciesByGroup queries group policies by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse GroupPoliciesByGroup(global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPoliciesByGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPoliciesByGroup queries group policies by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse GroupPoliciesByGroup(global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupPoliciesByGroup, null, options, request);
      }
      /// <summary>
      /// GroupPoliciesByGroup queries group policies by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse> GroupPoliciesByGroupAsync(global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPoliciesByGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPoliciesByGroup queries group policies by group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse> GroupPoliciesByGroupAsync(global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupPoliciesByGroup, null, options, request);
      }
      /// <summary>
      /// GroupPoliciesByAdmin queries group policies by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse GroupPoliciesByAdmin(global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPoliciesByAdmin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPoliciesByAdmin queries group policies by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse GroupPoliciesByAdmin(global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupPoliciesByAdmin, null, options, request);
      }
      /// <summary>
      /// GroupPoliciesByAdmin queries group policies by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse> GroupPoliciesByAdminAsync(global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupPoliciesByAdminAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupPoliciesByAdmin queries group policies by admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse> GroupPoliciesByAdminAsync(global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupPoliciesByAdmin, null, options, request);
      }
      /// <summary>
      /// Proposal queries a proposal based on proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryProposalResponse Proposal(global::Cosmos.Group.V1.QueryProposalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Proposal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Proposal queries a proposal based on proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryProposalResponse Proposal(global::Cosmos.Group.V1.QueryProposalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Proposal, null, options, request);
      }
      /// <summary>
      /// Proposal queries a proposal based on proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryProposalResponse> ProposalAsync(global::Cosmos.Group.V1.QueryProposalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Proposal queries a proposal based on proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryProposalResponse> ProposalAsync(global::Cosmos.Group.V1.QueryProposalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Proposal, null, options, request);
      }
      /// <summary>
      /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse ProposalsByGroupPolicy(global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalsByGroupPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse ProposalsByGroupPolicy(global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalsByGroupPolicy, null, options, request);
      }
      /// <summary>
      /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse> ProposalsByGroupPolicyAsync(global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalsByGroupPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse> ProposalsByGroupPolicyAsync(global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalsByGroupPolicy, null, options, request);
      }
      /// <summary>
      /// VoteByProposalVoter queries a vote by proposal id and voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse VoteByProposalVoter(global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteByProposalVoter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VoteByProposalVoter queries a vote by proposal id and voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse VoteByProposalVoter(global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteByProposalVoter, null, options, request);
      }
      /// <summary>
      /// VoteByProposalVoter queries a vote by proposal id and voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse> VoteByProposalVoterAsync(global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteByProposalVoterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VoteByProposalVoter queries a vote by proposal id and voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse> VoteByProposalVoterAsync(global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteByProposalVoter, null, options, request);
      }
      /// <summary>
      /// VotesByProposal queries a vote by proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVotesByProposalResponse VotesByProposal(global::Cosmos.Group.V1.QueryVotesByProposalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VotesByProposal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VotesByProposal queries a vote by proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVotesByProposalResponse VotesByProposal(global::Cosmos.Group.V1.QueryVotesByProposalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VotesByProposal, null, options, request);
      }
      /// <summary>
      /// VotesByProposal queries a vote by proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVotesByProposalResponse> VotesByProposalAsync(global::Cosmos.Group.V1.QueryVotesByProposalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VotesByProposalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VotesByProposal queries a vote by proposal id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVotesByProposalResponse> VotesByProposalAsync(global::Cosmos.Group.V1.QueryVotesByProposalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VotesByProposal, null, options, request);
      }
      /// <summary>
      /// VotesByVoter queries a vote by voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVotesByVoterResponse VotesByVoter(global::Cosmos.Group.V1.QueryVotesByVoterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VotesByVoter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VotesByVoter queries a vote by voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryVotesByVoterResponse VotesByVoter(global::Cosmos.Group.V1.QueryVotesByVoterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VotesByVoter, null, options, request);
      }
      /// <summary>
      /// VotesByVoter queries a vote by voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVotesByVoterResponse> VotesByVoterAsync(global::Cosmos.Group.V1.QueryVotesByVoterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VotesByVoterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VotesByVoter queries a vote by voter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryVotesByVoterResponse> VotesByVoterAsync(global::Cosmos.Group.V1.QueryVotesByVoterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VotesByVoter, null, options, request);
      }
      /// <summary>
      /// GroupsByMember queries groups by member address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsByMemberResponse GroupsByMember(global::Cosmos.Group.V1.QueryGroupsByMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsByMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupsByMember queries groups by member address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsByMemberResponse GroupsByMember(global::Cosmos.Group.V1.QueryGroupsByMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupsByMember, null, options, request);
      }
      /// <summary>
      /// GroupsByMember queries groups by member address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsByMemberResponse> GroupsByMemberAsync(global::Cosmos.Group.V1.QueryGroupsByMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsByMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GroupsByMember queries groups by member address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsByMemberResponse> GroupsByMemberAsync(global::Cosmos.Group.V1.QueryGroupsByMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupsByMember, null, options, request);
      }
      /// <summary>
      /// TallyResult returns the tally result of a proposal. If the proposal is
      /// still in voting period, then this query computes the current tally state,
      /// which might not be final. On the other hand, if the proposal is final,
      /// then it simply returns the `final_tally_result` state stored in the
      /// proposal itself.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryTallyResultResponse TallyResult(global::Cosmos.Group.V1.QueryTallyResultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TallyResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TallyResult returns the tally result of a proposal. If the proposal is
      /// still in voting period, then this query computes the current tally state,
      /// which might not be final. On the other hand, if the proposal is final,
      /// then it simply returns the `final_tally_result` state stored in the
      /// proposal itself.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryTallyResultResponse TallyResult(global::Cosmos.Group.V1.QueryTallyResultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TallyResult, null, options, request);
      }
      /// <summary>
      /// TallyResult returns the tally result of a proposal. If the proposal is
      /// still in voting period, then this query computes the current tally state,
      /// which might not be final. On the other hand, if the proposal is final,
      /// then it simply returns the `final_tally_result` state stored in the
      /// proposal itself.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryTallyResultResponse> TallyResultAsync(global::Cosmos.Group.V1.QueryTallyResultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TallyResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TallyResult returns the tally result of a proposal. If the proposal is
      /// still in voting period, then this query computes the current tally state,
      /// which might not be final. On the other hand, if the proposal is final,
      /// then it simply returns the `final_tally_result` state stored in the
      /// proposal itself.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryTallyResultResponse> TallyResultAsync(global::Cosmos.Group.V1.QueryTallyResultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TallyResult, null, options, request);
      }
      /// <summary>
      /// Groups queries all groups in state.
      ///
      /// Since: cosmos-sdk 0.47.1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsResponse Groups(global::Cosmos.Group.V1.QueryGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Groups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Groups queries all groups in state.
      ///
      /// Since: cosmos-sdk 0.47.1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.QueryGroupsResponse Groups(global::Cosmos.Group.V1.QueryGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Groups, null, options, request);
      }
      /// <summary>
      /// Groups queries all groups in state.
      ///
      /// Since: cosmos-sdk 0.47.1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsResponse> GroupsAsync(global::Cosmos.Group.V1.QueryGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Groups queries all groups in state.
      ///
      /// Since: cosmos-sdk 0.47.1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.QueryGroupsResponse> GroupsAsync(global::Cosmos.Group.V1.QueryGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Groups, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GroupInfo, serviceImpl.GroupInfo)
          .AddMethod(__Method_GroupPolicyInfo, serviceImpl.GroupPolicyInfo)
          .AddMethod(__Method_GroupMembers, serviceImpl.GroupMembers)
          .AddMethod(__Method_GroupsByAdmin, serviceImpl.GroupsByAdmin)
          .AddMethod(__Method_GroupPoliciesByGroup, serviceImpl.GroupPoliciesByGroup)
          .AddMethod(__Method_GroupPoliciesByAdmin, serviceImpl.GroupPoliciesByAdmin)
          .AddMethod(__Method_Proposal, serviceImpl.Proposal)
          .AddMethod(__Method_ProposalsByGroupPolicy, serviceImpl.ProposalsByGroupPolicy)
          .AddMethod(__Method_VoteByProposalVoter, serviceImpl.VoteByProposalVoter)
          .AddMethod(__Method_VotesByProposal, serviceImpl.VotesByProposal)
          .AddMethod(__Method_VotesByVoter, serviceImpl.VotesByVoter)
          .AddMethod(__Method_GroupsByMember, serviceImpl.GroupsByMember)
          .AddMethod(__Method_TallyResult, serviceImpl.TallyResult)
          .AddMethod(__Method_Groups, serviceImpl.Groups).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GroupInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupInfoRequest, global::Cosmos.Group.V1.QueryGroupInfoResponse>(serviceImpl.GroupInfo));
      serviceBinder.AddMethod(__Method_GroupPolicyInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupPolicyInfoRequest, global::Cosmos.Group.V1.QueryGroupPolicyInfoResponse>(serviceImpl.GroupPolicyInfo));
      serviceBinder.AddMethod(__Method_GroupMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupMembersRequest, global::Cosmos.Group.V1.QueryGroupMembersResponse>(serviceImpl.GroupMembers));
      serviceBinder.AddMethod(__Method_GroupsByAdmin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupsByAdminRequest, global::Cosmos.Group.V1.QueryGroupsByAdminResponse>(serviceImpl.GroupsByAdmin));
      serviceBinder.AddMethod(__Method_GroupPoliciesByGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupPoliciesByGroupRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByGroupResponse>(serviceImpl.GroupPoliciesByGroup));
      serviceBinder.AddMethod(__Method_GroupPoliciesByAdmin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupPoliciesByAdminRequest, global::Cosmos.Group.V1.QueryGroupPoliciesByAdminResponse>(serviceImpl.GroupPoliciesByAdmin));
      serviceBinder.AddMethod(__Method_Proposal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryProposalRequest, global::Cosmos.Group.V1.QueryProposalResponse>(serviceImpl.Proposal));
      serviceBinder.AddMethod(__Method_ProposalsByGroupPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryProposalsByGroupPolicyRequest, global::Cosmos.Group.V1.QueryProposalsByGroupPolicyResponse>(serviceImpl.ProposalsByGroupPolicy));
      serviceBinder.AddMethod(__Method_VoteByProposalVoter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryVoteByProposalVoterRequest, global::Cosmos.Group.V1.QueryVoteByProposalVoterResponse>(serviceImpl.VoteByProposalVoter));
      serviceBinder.AddMethod(__Method_VotesByProposal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryVotesByProposalRequest, global::Cosmos.Group.V1.QueryVotesByProposalResponse>(serviceImpl.VotesByProposal));
      serviceBinder.AddMethod(__Method_VotesByVoter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryVotesByVoterRequest, global::Cosmos.Group.V1.QueryVotesByVoterResponse>(serviceImpl.VotesByVoter));
      serviceBinder.AddMethod(__Method_GroupsByMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupsByMemberRequest, global::Cosmos.Group.V1.QueryGroupsByMemberResponse>(serviceImpl.GroupsByMember));
      serviceBinder.AddMethod(__Method_TallyResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryTallyResultRequest, global::Cosmos.Group.V1.QueryTallyResultResponse>(serviceImpl.TallyResult));
      serviceBinder.AddMethod(__Method_Groups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.QueryGroupsRequest, global::Cosmos.Group.V1.QueryGroupsResponse>(serviceImpl.Groups));
    }

  }
}
#endregion
